#ifndef AMSimulation_ModulesToTT_h_
#define AMSimulation_ModulesToTT_h_

#include <cassert>
#include <algorithm>
#include <vector>

// CUIDADO: Only work for tt25! To be fixed later...

//namespace slhcl1tt {

  class ModulesToTT {
  public:
    int get_tt(const std::vector<int>& modules) {
      int cnt = 0;
      for (const auto& module : modules) {
        if (std::binary_search(&(tt25_modules[0]), &(tt25_modules[0]) + tt25_modules_sz, module)) {
          cnt += 1;
        }
      }

      int tt = 25;
      if (cnt >= min_nstubs)
        return tt;
      return -1;
    }

    static const int min_nstubs = 5;
    static const int tt25_modules_sz = 390;
    static const int tt25_modules[tt25_modules_sz];
  };

  const int ModulesToTT::tt25_modules[ModulesToTT::tt25_modules_sz] = {50229,50230,50231,50232,50233,50234,50235,50236,50237,50329,50330,50331,50332,50333,50334,50335,50336,50337,50338,50429,50430,50431,50432,50433,50434,50435,50436,50437,60326,60327,60328,60329,60330,60331,60332,60333,60334,60335,60426,60427,60428,60429,60430,60431,60432,60433,60434,60435,60526,60527,60528,60529,60530,60531,60532,60533,60534,60535,60626,60627,60628,60629,60630,60631,60632,60633,60634,60635,70426,70427,70428,70429,70430,70431,70432,70433,70434,70435,70436,70526,70527,70528,70529,70530,70531,70532,70533,70534,70535,70536,70626,70627,70628,70629,70630,70631,70632,70633,70634,70635,70636,70726,70727,70728,70729,70730,70731,70732,70733,70734,70735,70736,70737,70826,70827,70828,70829,70830,70831,70832,70833,70834,70835,70836,70926,70927,70928,70929,70930,70931,70932,70933,70934,70935,70936,80611,80612,80613,80614,80615,80616,80617,80711,80712,80713,80714,80715,80716,80717,80811,80812,80813,80814,80815,80816,80817,80911,80912,80913,80914,80915,80916,80917,81011,81012,81013,81014,81015,81016,81017,81111,81112,81113,81114,81115,81116,81117,81211,81212,81213,81214,81215,81216,81217,90811,90812,90813,90814,90815,90816,90817,90818,90819,90911,90912,90913,90914,90915,90916,90917,90918,90919,91011,91012,91013,91014,91015,91016,91017,91018,91019,91111,91112,91113,91114,91115,91116,91117,91118,91119,91211,91212,91213,91214,91215,91216,91217,91218,91219,91311,91312,91313,91314,91315,91316,91317,91318,91319,91411,91412,91413,91414,91415,91416,91417,91418,91419,91511,91512,91513,91514,91515,91516,91517,91518,91519,91612,91613,91614,91615,91616,91617,91618,100911,100912,100913,100914,100915,100916,100917,100918,100919,100920,100921,101010,101011,101012,101013,101014,101015,101016,101017,101018,101019,101020,101021,101111,101112,101113,101114,101115,101116,101117,101118,101119,101120,101121,101210,101211,101212,101213,101214,101215,101216,101217,101218,101219,101220,101221,101310,101311,101312,101313,101314,101315,101316,101317,101318,101319,101320,101321,101410,101411,101412,101413,101414,101415,101416,101417,101418,101419,101420,101421,101511,101512,101513,101514,101515,101516,101517,101518,101519,101520,101521,101610,101611,101612,101613,101614,101615,101616,101617,101618,101619,101620,101621,101710,101711,101712,101713,101714,101715,101716,101717,101718,101719,101720,101721,101811,101812,101813,101814,101815,101816,101817,101818,101819,101820,101821,101911,101912,101913,101914,101915,101916,101917,101918,101919,101920,101921};

//}  // namespace slhcl1tt

#endif
